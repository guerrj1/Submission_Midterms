
Midterm1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a0  00800100  00000376  0000040a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000376  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  008001a0  008001a0  000004aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bad  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007be  00000000  00000000  00001101  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000407  00000000  00000000  000018bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  00001cc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042f  00000000  00000000  00001d84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000335  00000000  00000000  000021b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000024e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e7       	ldi	r30, 0x76	; 118
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 3a       	cpi	r26, 0xA0	; 160
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 ea       	ldi	r26, 0xA0	; 160
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 3a       	cpi	r26, 0xA6	; 166
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 0f 01 	call	0x21e	; 0x21e <main>
  9e:	0c 94 b9 01 	jmp	0x372	; 0x372 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_21>:
	}
}

//interrupt subroutine 
ISR(ADC_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	5f 93       	push	r21
  b8:	6f 93       	push	r22
  ba:	7f 93       	push	r23
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	af 93       	push	r26
  c2:	bf 93       	push	r27
  c4:	ef 93       	push	r30
  c6:	ff 93       	push	r31
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	27 97       	sbiw	r28, 0x07	; 7
  d2:	de bf       	out	0x3e, r29	; 62
  d4:	cd bf       	out	0x3d, r28	; 61
	volatile unsigned int j=0;
  d6:	1a 82       	std	Y+2, r1	; 0x02
  d8:	19 82       	std	Y+1, r1	; 0x01
	char temp[5];

	ADCvalue = (ADCH<<1);  //shifts ADCH by 1 to the left
  da:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  de:	88 0f       	add	r24, r24
  e0:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <ADCvalue>
	itoa(ADCvalue, temp, 10);
  e4:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <ADCvalue>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  e8:	4a e0       	ldi	r20, 0x0A	; 10
  ea:	be 01       	movw	r22, r28
  ec:	6d 5f       	subi	r22, 0xFD	; 253
  ee:	7f 4f       	sbci	r23, 0xFF	; 255
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 84 01 	call	0x308	; 0x308 <__itoa_ncheck>
	
	while(j<5) 
  f6:	89 81       	ldd	r24, Y+1	; 0x01
  f8:	9a 81       	ldd	r25, Y+2	; 0x02
  fa:	05 97       	sbiw	r24, 0x05	; 5
  fc:	b8 f4       	brcc	.+46     	; 0x12c <__vector_21+0x86>
	{
		ADCtemp[j] = temp[j]; //set temp as ADCtemp 
  fe:	e9 81       	ldd	r30, Y+1	; 0x01
 100:	fa 81       	ldd	r31, Y+2	; 0x02
 102:	a9 81       	ldd	r26, Y+1	; 0x01
 104:	ba 81       	ldd	r27, Y+2	; 0x02
 106:	83 e0       	ldi	r24, 0x03	; 3
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	8c 0f       	add	r24, r28
 10c:	9d 1f       	adc	r25, r29
 10e:	a8 0f       	add	r26, r24
 110:	b9 1f       	adc	r27, r25
 112:	8c 91       	ld	r24, X
 114:	e0 56       	subi	r30, 0x60	; 96
 116:	fe 4f       	sbci	r31, 0xFE	; 254
 118:	80 83       	st	Z, r24
		j++;  //increment the j temp
 11a:	89 81       	ldd	r24, Y+1	; 0x01
 11c:	9a 81       	ldd	r25, Y+2	; 0x02
 11e:	01 96       	adiw	r24, 0x01	; 1
 120:	9a 83       	std	Y+2, r25	; 0x02
 122:	89 83       	std	Y+1, r24	; 0x01
	char temp[5];

	ADCvalue = (ADCH<<1);  //shifts ADCH by 1 to the left
	itoa(ADCvalue, temp, 10);
	
	while(j<5) 
 124:	89 81       	ldd	r24, Y+1	; 0x01
 126:	9a 81       	ldd	r25, Y+2	; 0x02
 128:	05 97       	sbiw	r24, 0x05	; 5
 12a:	48 f3       	brcs	.-46     	; 0xfe <__vector_21+0x58>
	{
		ADCtemp[j] = temp[j]; //set temp as ADCtemp 
		j++;  //increment the j temp
	}
}
 12c:	27 96       	adiw	r28, 0x07	; 7
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	f8 94       	cli
 132:	de bf       	out	0x3e, r29	; 62
 134:	0f be       	out	0x3f, r0	; 63
 136:	cd bf       	out	0x3d, r28	; 61
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	ff 91       	pop	r31
 13e:	ef 91       	pop	r30
 140:	bf 91       	pop	r27
 142:	af 91       	pop	r26
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	7f 91       	pop	r23
 14a:	6f 91       	pop	r22
 14c:	5f 91       	pop	r21
 14e:	4f 91       	pop	r20
 150:	3f 91       	pop	r19
 152:	2f 91       	pop	r18
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <usart_init>:

void usart_init(void)  //usart initialization 
{
		//set baud rate
		UBRR0H = ((UBRR_VALUE) >> 8); //shift by 8 bits
 15e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
        UBRR0L = UBRR_VALUE; //set UBRRO low to the UBRR_VALUE
 162:	80 e1       	ldi	r24, 0x10	; 16
 164:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

		UCSR0A |= (1 << U2X0); //USART transmission speed
 168:	e0 ec       	ldi	r30, 0xC0	; 192
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	82 60       	ori	r24, 0x02	; 2
 170:	80 83       	st	Z, r24
		UCSR0B |= (1 << TXEN0); //enable transmission and reception
 172:	e1 ec       	ldi	r30, 0xC1	; 193
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	88 60       	ori	r24, 0x08	; 8
 17a:	80 83       	st	Z, r24
		UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00); //set frame to 8 data bits, no parity, 1 stop bit
 17c:	e2 ec       	ldi	r30, 0xC2	; 194
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	86 60       	ori	r24, 0x06	; 6
 184:	80 83       	st	Z, r24
		
		sei();   //enable global interrupt 
 186:	78 94       	sei
 188:	08 95       	ret

0000018a <send_ATdata>:
}

void send_ATdata(volatile unsigned char c[]) 
{
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	00 d0       	rcall	.+0      	; 0x190 <send_ATdata+0x6>
 190:	00 d0       	rcall	.+0      	; 0x192 <send_ATdata+0x8>
 192:	cd b7       	in	r28, 0x3d	; 61
 194:	de b7       	in	r29, 0x3e	; 62
 196:	ac 01       	movw	r20, r24
	//counter variable initializations
	volatile unsigned int i=0;
 198:	1a 82       	std	Y+2, r1	; 0x02
 19a:	19 82       	std	Y+1, r1	; 0x01
	volatile unsigned int j=0;
 19c:	1c 82       	std	Y+4, r1	; 0x04
 19e:	1b 82       	std	Y+3, r1	; 0x03
	
	j = 0; //initialize counter j to 0
 1a0:	1c 82       	std	Y+4, r1	; 0x04
 1a2:	1b 82       	std	Y+3, r1	; 0x03
	
	//while still not at the end
	while (c[j] != 0x00) 
 1a4:	eb 81       	ldd	r30, Y+3	; 0x03
 1a6:	fc 81       	ldd	r31, Y+4	; 0x04
 1a8:	e8 0f       	add	r30, r24
 1aa:	f9 1f       	adc	r31, r25
 1ac:	80 81       	ld	r24, Z
 1ae:	88 23       	and	r24, r24
 1b0:	69 f0       	breq	.+26     	; 0x1cc <send_ATdata+0x42>
	{ 
		j++;   //increment j counter 
 1b2:	2b 81       	ldd	r18, Y+3	; 0x03
 1b4:	3c 81       	ldd	r19, Y+4	; 0x04
 1b6:	2f 5f       	subi	r18, 0xFF	; 255
 1b8:	3f 4f       	sbci	r19, 0xFF	; 255
 1ba:	3c 83       	std	Y+4, r19	; 0x04
 1bc:	2b 83       	std	Y+3, r18	; 0x03
	volatile unsigned int j=0;
	
	j = 0; //initialize counter j to 0
	
	//while still not at the end
	while (c[j] != 0x00) 
 1be:	eb 81       	ldd	r30, Y+3	; 0x03
 1c0:	fc 81       	ldd	r31, Y+4	; 0x04
 1c2:	e4 0f       	add	r30, r20
 1c4:	f5 1f       	adc	r31, r21
 1c6:	80 81       	ld	r24, Z
 1c8:	81 11       	cpse	r24, r1
 1ca:	f3 cf       	rjmp	.-26     	; 0x1b2 <send_ATdata+0x28>
	{ 
		j++;   //increment j counter 
	}
	
	//while i is less than j counter
	while (i<j)
 1cc:	29 81       	ldd	r18, Y+1	; 0x01
 1ce:	3a 81       	ldd	r19, Y+2	; 0x02
 1d0:	8b 81       	ldd	r24, Y+3	; 0x03
 1d2:	9c 81       	ldd	r25, Y+4	; 0x04
 1d4:	28 17       	cp	r18, r24
 1d6:	39 07       	cpc	r19, r25
 1d8:	d8 f4       	brcc	.+54     	; 0x210 <send_ATdata+0x86>
	 {
		 //wait whike prevoius byte is completed
		while(!(UCSR0A & (1 << UDRE0)));  //buffer is empty and can be written to when UDREO is 1
 1da:	e0 ec       	ldi	r30, 0xC0	; 192
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = c[i]; //transmit data 
 1de:	66 ec       	ldi	r22, 0xC6	; 198
 1e0:	70 e0       	ldi	r23, 0x00	; 0
	
	//while i is less than j counter
	while (i<j)
	 {
		 //wait whike prevoius byte is completed
		while(!(UCSR0A & (1 << UDRE0)));  //buffer is empty and can be written to when UDREO is 1
 1e2:	90 81       	ld	r25, Z
 1e4:	95 ff       	sbrs	r25, 5
 1e6:	fd cf       	rjmp	.-6      	; 0x1e2 <send_ATdata+0x58>
		UDR0 = c[i]; //transmit data 
 1e8:	a9 81       	ldd	r26, Y+1	; 0x01
 1ea:	ba 81       	ldd	r27, Y+2	; 0x02
 1ec:	a4 0f       	add	r26, r20
 1ee:	b5 1f       	adc	r27, r21
 1f0:	8c 91       	ld	r24, X
 1f2:	db 01       	movw	r26, r22
 1f4:	8c 93       	st	X, r24
		i++;  //increment i counter 
 1f6:	29 81       	ldd	r18, Y+1	; 0x01
 1f8:	3a 81       	ldd	r19, Y+2	; 0x02
 1fa:	2f 5f       	subi	r18, 0xFF	; 255
 1fc:	3f 4f       	sbci	r19, 0xFF	; 255
 1fe:	3a 83       	std	Y+2, r19	; 0x02
 200:	29 83       	std	Y+1, r18	; 0x01
	{ 
		j++;   //increment j counter 
	}
	
	//while i is less than j counter
	while (i<j)
 202:	29 81       	ldd	r18, Y+1	; 0x01
 204:	3a 81       	ldd	r19, Y+2	; 0x02
 206:	8b 81       	ldd	r24, Y+3	; 0x03
 208:	9c 81       	ldd	r25, Y+4	; 0x04
 20a:	28 17       	cp	r18, r24
 20c:	39 07       	cpc	r19, r25
 20e:	48 f3       	brcs	.-46     	; 0x1e2 <send_ATdata+0x58>
		 //wait whike prevoius byte is completed
		while(!(UCSR0A & (1 << UDRE0)));  //buffer is empty and can be written to when UDREO is 1
		UDR0 = c[i]; //transmit data 
		i++;  //increment i counter 
	 }
}
 210:	0f 90       	pop	r0
 212:	0f 90       	pop	r0
 214:	0f 90       	pop	r0
 216:	0f 90       	pop	r0
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	08 95       	ret

0000021e <main>:
void send_ATdata (volatile unsigned char c[]);  //sends the arrays to this function

int main(void)
{
	//ADC intializations
	ADMUX = 0;              //use ADC0
 21e:	ec e7       	ldi	r30, 0x7C	; 124
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0);  //use AVcc as the reference
 224:	80 81       	ld	r24, Z
 226:	80 64       	ori	r24, 0x40	; 64
 228:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR);  //Right adjust for 8 bit resolution
 22a:	80 81       	ld	r24, Z
 22c:	80 62       	ori	r24, 0x20	; 32
 22e:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADATE); //Set ADC Auto Trigger Enable
 230:	ea e7       	ldi	r30, 0x7A	; 122
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	80 62       	ori	r24, 0x20	; 32
 238:	80 83       	st	Z, r24
	ADCSRB = 0;             //0 for free running mode
 23a:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	ADCSRA |= (1 << ADEN);  //Enable the ADC
 23e:	80 81       	ld	r24, Z
 240:	80 68       	ori	r24, 0x80	; 128
 242:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);  //Enable Interrupts
 244:	80 81       	ld	r24, Z
 246:	88 60       	ori	r24, 0x08	; 8
 248:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);  //Start the ADC conversion
 24a:	80 81       	ld	r24, Z
 24c:	80 64       	ori	r24, 0x40	; 64
 24e:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);  //set prescaler to 128
 250:	80 81       	ld	r24, Z
 252:	87 60       	ori	r24, 0x07	; 7
 254:	80 83       	st	Z, r24
	
	usart_init();      //usart function call 
 256:	0e 94 af 00 	call	0x15e	; 0x15e <usart_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25a:	2f ef       	ldi	r18, 0xFF	; 255
 25c:	83 ed       	ldi	r24, 0xD3	; 211
 25e:	90 e3       	ldi	r25, 0x30	; 48
 260:	21 50       	subi	r18, 0x01	; 1
 262:	80 40       	sbci	r24, 0x00	; 0
 264:	90 40       	sbci	r25, 0x00	; 0
 266:	e1 f7       	brne	.-8      	; 0x260 <main+0x42>
 268:	00 c0       	rjmp	.+0      	; 0x26a <main+0x4c>
 26a:	00 00       	nop
	
	_delay_ms(1000);
	send_ATdata(CWMODE);
 26c:	82 e9       	ldi	r24, 0x92	; 146
 26e:	91 e0       	ldi	r25, 0x01	; 1
 270:	0e 94 c5 00 	call	0x18a	; 0x18a <send_ATdata>
 274:	2f ef       	ldi	r18, 0xFF	; 255
 276:	83 ed       	ldi	r24, 0xD3	; 211
 278:	90 e3       	ldi	r25, 0x30	; 48
 27a:	21 50       	subi	r18, 0x01	; 1
 27c:	80 40       	sbci	r24, 0x00	; 0
 27e:	90 40       	sbci	r25, 0x00	; 0
 280:	e1 f7       	brne	.-8      	; 0x27a <main+0x5c>
 282:	00 c0       	rjmp	.+0      	; 0x284 <main+0x66>
 284:	00 00       	nop
	_delay_ms(1000);
	send_ATdata(WIFI);
 286:	85 e7       	ldi	r24, 0x75	; 117
 288:	91 e0       	ldi	r25, 0x01	; 1
 28a:	0e 94 c5 00 	call	0x18a	; 0x18a <send_ATdata>
 28e:	2f ef       	ldi	r18, 0xFF	; 255
 290:	87 ea       	ldi	r24, 0xA7	; 167
 292:	91 e6       	ldi	r25, 0x61	; 97
 294:	21 50       	subi	r18, 0x01	; 1
 296:	80 40       	sbci	r24, 0x00	; 0
 298:	90 40       	sbci	r25, 0x00	; 0
 29a:	e1 f7       	brne	.-8      	; 0x294 <main+0x76>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <main+0x80>
 29e:	00 00       	nop
	_delay_ms(2000);
	send_ATdata(ENABLE);
 2a0:	87 e6       	ldi	r24, 0x67	; 103
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	0e 94 c5 00 	call	0x18a	; 0x18a <send_ATdata>
 2a8:	2f ef       	ldi	r18, 0xFF	; 255
 2aa:	83 ed       	ldi	r24, 0xD3	; 211
 2ac:	90 e3       	ldi	r25, 0x30	; 48
 2ae:	21 50       	subi	r18, 0x01	; 1
 2b0:	80 40       	sbci	r24, 0x00	; 0
 2b2:	90 40       	sbci	r25, 0x00	; 0
 2b4:	e1 f7       	brne	.-8      	; 0x2ae <main+0x90>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <main+0x9a>
 2b8:	00 00       	nop

	//while always
	while(1)
	{
		_delay_ms(1000);  //delay function
		send_ATdata(CIPSTART); //thingspeak connection in port 80
 2ba:	8e e3       	ldi	r24, 0x3E	; 62
 2bc:	91 e0       	ldi	r25, 0x01	; 1
 2be:	0e 94 c5 00 	call	0x18a	; 0x18a <send_ATdata>
 2c2:	2f ef       	ldi	r18, 0xFF	; 255
 2c4:	83 ed       	ldi	r24, 0xD3	; 211
 2c6:	90 e3       	ldi	r25, 0x30	; 48
 2c8:	21 50       	subi	r18, 0x01	; 1
 2ca:	80 40       	sbci	r24, 0x00	; 0
 2cc:	90 40       	sbci	r25, 0x00	; 0
 2ce:	e1 f7       	brne	.-8      	; 0x2c8 <main+0xaa>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <main+0xb4>
 2d2:	00 00       	nop
		_delay_ms(1000);  //delay function
		send_ATdata(CIPSEND); //data length  
 2d4:	8e e2       	ldi	r24, 0x2E	; 46
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	0e 94 c5 00 	call	0x18a	; 0x18a <send_ATdata>
 2dc:	2f ef       	ldi	r18, 0xFF	; 255
 2de:	83 ed       	ldi	r24, 0xD3	; 211
 2e0:	90 e3       	ldi	r25, 0x30	; 48
 2e2:	21 50       	subi	r18, 0x01	; 1
 2e4:	80 40       	sbci	r24, 0x00	; 0
 2e6:	90 40       	sbci	r25, 0x00	; 0
 2e8:	e1 f7       	brne	.-8      	; 0x2e2 <main+0xc4>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <main+0xce>
 2ec:	00 00       	nop
		_delay_ms(1000);  //delay function
		send_ATdata(SEND_DATA); //api key 
 2ee:	85 e0       	ldi	r24, 0x05	; 5
 2f0:	91 e0       	ldi	r25, 0x01	; 1
 2f2:	0e 94 c5 00 	call	0x18a	; 0x18a <send_ATdata>
		send_ATdata(ADCtemp);  //sends the temperature data from sensor 
 2f6:	80 ea       	ldi	r24, 0xA0	; 160
 2f8:	91 e0       	ldi	r25, 0x01	; 1
 2fa:	0e 94 c5 00 	call	0x18a	; 0x18a <send_ATdata>
		send_ATdata(PAUSE_DELAY);  //delay for display output
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	91 e0       	ldi	r25, 0x01	; 1
 302:	0e 94 c5 00 	call	0x18a	; 0x18a <send_ATdata>
 306:	d0 cf       	rjmp	.-96     	; 0x2a8 <main+0x8a>

00000308 <__itoa_ncheck>:
 308:	bb 27       	eor	r27, r27
 30a:	4a 30       	cpi	r20, 0x0A	; 10
 30c:	31 f4       	brne	.+12     	; 0x31a <__itoa_ncheck+0x12>
 30e:	99 23       	and	r25, r25
 310:	22 f4       	brpl	.+8      	; 0x31a <__itoa_ncheck+0x12>
 312:	bd e2       	ldi	r27, 0x2D	; 45
 314:	90 95       	com	r25
 316:	81 95       	neg	r24
 318:	9f 4f       	sbci	r25, 0xFF	; 255
 31a:	0c 94 90 01 	jmp	0x320	; 0x320 <__utoa_common>

0000031e <__utoa_ncheck>:
 31e:	bb 27       	eor	r27, r27

00000320 <__utoa_common>:
 320:	fb 01       	movw	r30, r22
 322:	55 27       	eor	r21, r21
 324:	aa 27       	eor	r26, r26
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	aa 1f       	adc	r26, r26
 32c:	a4 17       	cp	r26, r20
 32e:	10 f0       	brcs	.+4      	; 0x334 <__utoa_common+0x14>
 330:	a4 1b       	sub	r26, r20
 332:	83 95       	inc	r24
 334:	50 51       	subi	r21, 0x10	; 16
 336:	b9 f7       	brne	.-18     	; 0x326 <__utoa_common+0x6>
 338:	a0 5d       	subi	r26, 0xD0	; 208
 33a:	aa 33       	cpi	r26, 0x3A	; 58
 33c:	08 f0       	brcs	.+2      	; 0x340 <__utoa_common+0x20>
 33e:	a9 5d       	subi	r26, 0xD9	; 217
 340:	a1 93       	st	Z+, r26
 342:	00 97       	sbiw	r24, 0x00	; 0
 344:	79 f7       	brne	.-34     	; 0x324 <__utoa_common+0x4>
 346:	b1 11       	cpse	r27, r1
 348:	b1 93       	st	Z+, r27
 34a:	11 92       	st	Z+, r1
 34c:	cb 01       	movw	r24, r22
 34e:	0c 94 a9 01 	jmp	0x352	; 0x352 <strrev>

00000352 <strrev>:
 352:	dc 01       	movw	r26, r24
 354:	fc 01       	movw	r30, r24
 356:	67 2f       	mov	r22, r23
 358:	71 91       	ld	r23, Z+
 35a:	77 23       	and	r23, r23
 35c:	e1 f7       	brne	.-8      	; 0x356 <strrev+0x4>
 35e:	32 97       	sbiw	r30, 0x02	; 2
 360:	04 c0       	rjmp	.+8      	; 0x36a <strrev+0x18>
 362:	7c 91       	ld	r23, X
 364:	6d 93       	st	X+, r22
 366:	70 83       	st	Z, r23
 368:	62 91       	ld	r22, -Z
 36a:	ae 17       	cp	r26, r30
 36c:	bf 07       	cpc	r27, r31
 36e:	c8 f3       	brcs	.-14     	; 0x362 <strrev+0x10>
 370:	08 95       	ret

00000372 <_exit>:
 372:	f8 94       	cli

00000374 <__stop_program>:
 374:	ff cf       	rjmp	.-2      	; 0x374 <__stop_program>
